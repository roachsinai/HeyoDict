#! /usr/bin/python
#! -*- coding: utf-8 -*-
import sys
import urllib.request, urllib.parse, urllib.error, urllib.request, urllib.error, urllib.parse
import json

"""
Reversion HeyooDic
Transfer from unoffical API to offical API

Chrisplus
2014-6
"""

# Key and name
url = "http://fanyi.youdao.com/openapi.do?%s"
keyFrom = "SunnyArtStudio"
key = "1884243682"
dataType = "data"
docType = "json"
version = "1.1"
queryWord = ""
# dic or translate
only = ""

core_command_quit = ".exit"

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'

# whether print `more ref`
more_ref = False

def printUsage():
        print("dict -d word")
        print("dict -t word")
        print("dict word -")
        print("dict words")

def sendRequest(keyword, selection):
        # build parameters
        if keyword is None or not keyword:
            return -1

        param = {}
        param.update({'keyfrom' : keyFrom})
        param.update({'key' : key})
        param.update({'type': dataType})
        param.update({'doctype': docType})
        param.update({'version': version})

        if selection is not None:
            param.update({'only': selection})

        param.update({'q': keyword})

        # build url and send request
        requestUrl = url % urllib.parse.urlencode(param)
        # print requestUrl
        try:
            content = urllib.request.urlopen(requestUrl).read()
        except:
            print(bcolors.WARNING + "Network Error"+bcolors.ENDC)
            return -1

        parseContent(content)

def parseContent(content):
        try:
            jsonData = json.loads(content)
        except ValueError:
            print("Invalid Json Content")
            return -1

        # handle error code
        errorCode = jsonData['errorCode']
        if errorCode == 0:
            # successful
            showResult(jsonData)
        elif errorCode == 20:
                print("Too many words")
        elif errorCode == 30:
                print("I cannot do it")
        elif errorCode == 40:
                print("I have no idea")
        elif errorCode == 50:
                print("Invalid key")
        elif errorCode == 60:
                print("No results")

        #finish

def showResult(jsondata):
        #First extract useful fields
        words = jsondata['query']
        if 'basic' not in jsondata:
            # print(' '.join(['Oops,', str(sys.argv), 'was eaten by a monster!']))
            print('Oops, a special word!')
            print(bcolors.WARNING+ 'lɪtl bɪtʃ!' + bcolors.ENDC)
            return
        phonetic = jsondata['basic'].get('uk-phonetic','')
        explains = jsondata['basic']['explains']

        #Then show word and its phonetic
        basic_meaning = words + bcolors.HEADER + " [" + phonetic + "]" + bcolors.ENDC

        #Then show the explainations from dict
        print('======== ' + basic_meaning + ' ========')
        for ex in explains:
                print(' ' + bcolors.OKGREEN + ex + bcolors.ENDC + ' ')
        if more_ref:
            if 'web' not in jsondata:
                print("\nDear Miss %s," % words)
                print(bcolors.OKBLUE + "    There is no more thing in my pockets!" + bcolors.ENDC)
                return
            web_explains = jsondata['web']
            print('======== ' + 'more ref' + ' ========')
            for web in web_explains:
                print('------ ' + web['key'] + ' ------')
                for exp in web['value']:
                    print(' ' + bcolors.OKBLUE + exp + bcolors.ENDC + ' ')


if __name__ == "__main__":
        if len(sys.argv) == 1:
            printUsage()
        elif len(sys.argv) == 3:
            if sys.argv[1] == "-d":
                only = "dict"
                queryword = sys.argv[2]
                sendRequest(queryword, only)
            elif sys.argv[1] == "-t":
                only = "tanslate"
                queryword = sys.argv[2]
                sendRequest(queryword, only)
            elif sys.argv[2] == "-":
                queryword = sys.argv[1]
                more_ref = True
                sendRequest(queryword, only)
            else:
                printUsage()
        else:
            queryword = " ".join(sys.argv[1:])
            sendRequest(queryword, None)
