#! /usr/bin/python
#! -*- coding: utf-8 -*-
import os
import sys
import urllib.request, urllib.parse, urllib.error, urllib.request, urllib.error, urllib.parse
from urllib.error import URLError, HTTPError
import json
import subprocess

"""
Reversion HeyooDic
Transfer from unoffical API to offical API

Chrisplus
2014-6
"""

HOME = os.path.expanduser("~")
BASE_DIR = os.path.join(HOME, '.dict_youdao')   # 用户数据根目录
VOICE_DIR = os.path.join(BASE_DIR, 'voice')     # 音频文件

# Key and name
url = "http://fanyi.youdao.com/openapi.do?%s"
keyFrom = "{{@@ env['youdao_fanyi_keyFrom'] @@}}"
key = "{{@@ env['youdao_fanyi_key'] @@}}"
dataType = "data"
docType = "json"
version = "1.1"
queryWord = ""
# dic or translate
only = ""

core_command_quit = ".exit"

# class bcolors:
#     HEADER = '\033[95m'           # 粉色
#     OKBLUE = '\033[94m'           # 蓝色
#     OKGREEN = '\033[92m'          # 绿色
#     WARNING = '\033[93m'          # 黄色
#     FAIL = '\033[91m'             # 红色
#     BOLD = '\033[1m'              # 粗体
#     ENDC = '\033[0m'              # 结束

# https://blog.csdn.net/JohinieLi/article/details/80388838
# -----------------colorama模块的一些常量---------------------------
# Fore: BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE, RESET.
# Back: BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE, RESET.
# Style: DIM, NORMAL, BRIGHT, RESET_ALL
#

from colorama import  init, Fore, Back # , Style
init(autoreset=True)
class Colored(object):

    #  前景色:红色  背景色:默认
    def red(self, s):
        return Fore.RED + s + Fore.RESET

    #  前景色:绿色  背景色:默认
    def green(self, s):
        return Fore.GREEN + s + Fore.RESET

    #  前景色:黄色  背景色:默认
    def yellow(self, s):
        return Fore.YELLOW + s + Fore.RESET

    #  前景色:蓝色  背景色:默认
    def blue(self, s):
        return Fore.BLUE + s + Fore.RESET

    #  前景色:洋红色  背景色:默认
    def magenta(self, s):
        return Fore.MAGENTA + s + Fore.RESET

    #  前景色:青色  背景色:默认
    def cyan(self, s):
        return Fore.CYAN + s + Fore.RESET

    #  前景色:白色  背景色:默认
    def white(self, s):
        return Fore.WHITE + s + Fore.RESET

    #  前景色:黑色  背景色:默认
    def black(self, s):
        return Fore.BLACK

    #  前景色:白色  背景色:绿色
    def white_green(self, s):
        return Fore.WHITE + Back.GREEN + s + Fore.RESET + Back.RESET

color = Colored() 

# whether print `more ref`
more_ref = False

def printUsage():
        print("dict -d word[s]")
        print("dict -t word[s]")
        print("dict -v word[s]")
        print("dict -r word[s]")
        print("dict -m word[s]")
        print("dict word[s]")

def sendRequest(keyword, selection):
        # build parameters
        if keyword is None or not keyword:
            return -1

        param = {}
        param.update({'keyfrom' : keyFrom})
        param.update({'key' : key})
        param.update({'type': dataType})
        param.update({'doctype': docType})
        param.update({'version': version})

        if selection is not None:
            param.update({'only': selection})

        param.update({'q': keyword})

        # build url and send request
        requestUrl = url % urllib.parse.urlencode(param)
        # print requestUrl
        try:
            content = urllib.request.urlopen(requestUrl).read()
        except:
            # print(bcolors.WARNING + "Network Error" + bcolors.ENDC)
            print(color.red("Network Error"))
            return -1

        parseContent(content)

def parseContent(content):
        try:
            jsonData = json.loads(content)
        except ValueError:
            print("Invalid Json Content")
            return -1

        # handle error code
        errorCode = jsonData['errorCode']
        if errorCode == 0:
            # successful
            showResult(jsonData)
        elif errorCode == 20:
                print("Too many words")
        elif errorCode == 30:
                print("I cannot do it")
        elif errorCode == 40:
                print("I have no idea")
        elif errorCode == 50:
                print("Invalid key")
        elif errorCode == 60:
                print("No results")

        #finish

def showResult(jsondata):
        #First extract useful fields
        words = jsondata['query']
        if 'basic' not in jsondata:
            # print(' '.join(['Oops,', str(sys.argv), 'was eaten by a monster!']))
            print('Oops, a special word!')
            print(color.red('lɪtl bɪtʃ!'))
            sys.exit() # not use return, for download pronunciation
        phonetic = jsondata['basic'].get('uk-phonetic','')
        explains = jsondata['basic']['explains']

        #Then show word and its phonetic
        basic_meaning = words + color.magenta(" [" + phonetic + "]")

        #Then show the explainations from dict
        print('======== ' + basic_meaning + ' ========')
        for ex in explains:
                print(' ' + color.green(ex) + ' ')
        if more_ref:
            if 'web' not in jsondata:
                print("\nDear Miss %s," % words)
                print(color.blue("    There is no more thing in my pockets!"))
                return
            web_explains = jsondata['web']
            print('======== ' + 'more ref' + ' ========')
            for web in web_explains:
                print('------ ' + web['key'] + ' ------')
                for exp in web['value']:
                    print(' ' + color.blue(exp) + ' ')

def playVoice(queryword, isReplay):
    voice_file = os.path.join(VOICE_DIR, 'pronunciation.mp3')
    if not isReplay:
        audioUrl = 'http://dict.youdao.com/dictvoice?audio=%s' % queryword
        try:
            r = urllib.request.urlopen(audioUrl)
        except HTTPError as e:
            print('Error code: ', e.code)
            print('Replay the pronunciation of lasted query word!')
        except URLError as e:
            print('Reason: ', e.reason)
            print('Replay the pronunciation of lasted query word!')
        else:
            with open(voice_file, 'wb') as f:
                f.write(r.read())
    subprocess.call(['play', voice_file], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)


if __name__ == "__main__":
    if len(sys.argv) == 1:
        printUsage()
    elif sys.argv[1] == "-d":
        only = "dict"
        queryword = " ".join(sys.argv[2:])
        sendRequest(queryword, only)
    elif sys.argv[1] == "-t":
        only = "tanslate"
        queryword = " ".join(sys.argv[2:])
        sendRequest(queryword, only)
    elif sys.argv[1] == "-v":
        queryword = " ".join(sys.argv[2:])
        if queryword != "":
            sendRequest(queryword, None)
            queryvoice = "%20".join(sys.argv[2:])
            playVoice(queryvoice, False)
        else:
            playVoice("", True)
    elif sys.argv[1] == "-m":
        queryword = " ".join(sys.argv[2:])
        more_ref = True
        sendRequest(queryword, only)
    elif sys.argv[1] == "-r":
        # replay voice
        playVoice('', True)
    else:
        queryword = " ".join(sys.argv[1:])
        sendRequest(queryword, None)
